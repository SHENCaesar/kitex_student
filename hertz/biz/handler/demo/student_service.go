// Code generated by hertz generator.

package demo

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"

	demo "github.com/SHENCaesar/kitex_student/hertz/biz/model/demo"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	"github.com/cloudwego/kitex/pkg/klog"
	etcd "github.com/kitex-contrib/registry-etcd"
)

var cli genericclient.Client

//泛化调用
func init(){
	path := "../kitex/idl/student.thrift"
	p, err := generic.NewThriftFileProvider(path)
	if err != nil {
		klog.Fatalf("new thrift file provider failed: %v", err)
	}
	g, err := generic.HTTPThriftGeneric(p)
	if err != nil {
		klog.Fatalf("new map thrift generic failed: %v", err)
	}
	r, err := etcd.NewEtcdResolver([]string{"127.0.0.1:2379"})
	if err != nil {
		klog.Fatalf("new EtcdResolver failed: %v", err)
	}	
	cli, err = genericclient.NewClient("kitex_student_yeah", g, client.WithResolver(r))
	if err != nil {
		klog.Fatalf("new http generic client failed: %v", err)
	}
}

// Register .
// @router /add-student-info [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demo.Student
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	byteReq, err := json.Marshal(req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		log.Fatal(err)
		return
	}	
	httpReq, err := http.NewRequest(http.MethodPost, "", bytes.NewBuffer(byteReq))
	if err != nil {
		hlog.Warnf("new http request failed: %v", err)
		c.JSON(http.StatusInternalServerError, err.Error())
		return
	}	
	httpReq.URL.Path = string(c.Path())
	customReq, err := generic.FromHTTPRequest(httpReq)
	if err != nil {
		log.Fatal(err)
	}	
	resp, err := cli.GenericCall(ctx, "", customReq)
	if err != nil {
		log.Fatal(err)
	}
	realResp, ok := resp.(*generic.HTTPResponse)
	if !ok {
		c.JSON(http.StatusInternalServerError, fmt.Errorf("convert to HTTPResponse error"))
		return
	}

	c.JSON(http.StatusOK, realResp.Body)
}

// Query .
// @router /query [GET]
func Query(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demo.QueryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	httpReq, err := http.NewRequest(http.MethodGet, "", nil)
	if err != nil {
		hlog.Warnf("new http request failed: %v", err)
		c.JSON(http.StatusInternalServerError, err.Error())
		return
	}
	httpReq.URL.Path = string(c.Path())
	q := httpReq.URL.Query()
	q.Add("id", strconv.Itoa(int(req.ID)))
	httpReq.URL.RawQuery = q.Encode()
	customReq, err := generic.FromHTTPRequest(httpReq)
	if err != nil {
		log.Panicf("generic.FromHTTPRequest err: %v", err)
	}
	resp, err := cli.GenericCall(ctx, "", customReq)
	if err != nil {
		log.Panicf("GenericCall err: %v", err)
	}
	realResp, ok := resp.(*generic.HTTPResponse)
	if !ok {
		c.JSON(http.StatusInternalServerError, fmt.Errorf("convert to HTTPResponse error"))
		return
	}
	c.JSON(http.StatusOK, realResp.Body)
}
