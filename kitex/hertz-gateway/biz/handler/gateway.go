// Code generated by hertz generator.

package handler

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	"github.com/cloudwego/kitex/pkg/kerrors"
	"net/http"
	"sync"

	"github.com/cloudwego/hertz/pkg/app"
)

type requiredParams struct {
	Method    string `json:"method,required"`
	BizParams string `json:"biz_params,required"`
}

var SvcMap sync.Map

func HttpGateway(ctx context.Context, c *app.RequestContext) {
	svcName := c.Param("svc")
	cli, ok := SvcMap.Load(svcName)
	if !ok {
		c.JSON(http.StatusOK, fmt.Errorf("service %v does not exist", svcName))
		return
	}
	var req requiredParams
	err := c.BindAndValidate(&req)
	if err != nil {
		c.String(http.StatusOK, err.Error())
		return
	}

	httpReq, err := http.NewRequest(http.MethodPost, "", bytes.NewBuffer([]byte(req.BizParams)))
	if err != nil {
		hlog.Warnf("new http request failed: %v", err)
		c.JSON(http.StatusOK, err.Error())
		return
	}
	httpReq.URL.Path = fmt.Sprintf("/%s/%s", svcName, req.Method)

	customReq, err := generic.FromHTTPRequest(httpReq)
	if err != nil {
    hlog.Errorf("failed to convert HTTP request to custom request: %v", err)
    c.JSON(http.StatusInternalServerError, map[string]string{"error": "failed to process request"})
    return
}

	resp, err := cli.(genericclient.Client).GenericCall(ctx, "", customReq)
	respMap := make(map[string]interface{})
	if err != nil {
		hlog.Errorf("GenericCall err:%v", err)
		bizErr, ok := kerrors.FromBizStatusError(err)
		if !ok {
			c.JSON(http.StatusInternalServerError, errors.New("server handle error"))
			return
		}
		respMap["code"] = bizErr.BizStatusCode()
		respMap["message"] = bizErr.BizMessage()
		c.JSON(http.StatusInternalServerError, respMap)
		return
	}
	realResp, ok := resp.(*generic.HTTPResponse)
	if !ok {
		c.JSON(http.StatusOK, errors.New("server handle error"))
		return
	}
	respMap["code"] = 0
	respMap["message"] = "ok"
	respMap["data"] = realResp.Body
	c.JSON(http.StatusOK, respMap)
}
